---
name: Build and publish lilygo firmware

on:
  workflow_dispatch:
    inputs:                         # Comment if automatic ESPHOME version is enabled
      # files:
      #   description: Comma-separated list of files to build.
      #   required: true
      #   type: string  
      name:
        description: Name of the firmware to publish.
        required: false
        type: string
        default: ESPHome
      manifest_filename:
        description: Filename of the manifest to write.
        required: false
        type: string
        default: manifest.json
      esphome_version:
        description: 'ESPHome version'
        required: false
        type: string
        default: latest
      # publish_type:
      #   description: 'Publish Type (Test/Release)'
      #   required: true
      #   default: 'test'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
    steps:
      - id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -Rcn 'inputs | . / ","')
          echo ::set-output name=files::$files
  build:
    name: Build ESPHome binary for ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    if: needs.pr-check.outputs.number != 'null'
    strategy:
      matrix:
        file:
          - LILYGO-T-Higrow-ESP32.yaml
    outputs:
            esphome-version: ${{ steps.esphome-build.outputs.esphome-version }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4.1.7
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .github/yamllint.yml
      # - name: Get latest ESPHome version
      #   uses: actions/cache@v3
      #   with:
      #       path: ~/.esphomerc
      #       key: esphome-versions-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      # - run: |
      #     echo "latest_version=$(esphome --version | cut -d' ' -f3)" >> $HOME/.esphomerc
      - name: Build ESPHome firmware to verify configuration
        uses: esphome/build-action@v3.2.0
        id: esphome-build
        with:
          yaml_file: ${{ matrix.file }}
          version: ${{ inputs.esphome_version }}
          # version: ${{ cat $HOME/.esphomerc | grep latest_version | cut -d'=' -f2 }}

      - run: |
          mkdir output
          mv "${{ steps.esphome-build.outputs.name }}" output/

      - uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ inputs.name }}
          path: output

  publish-test:
    needs: build
    name: Publish new test firmware
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/download-artifact@v4.1.7
        with:
          path: output
          name: ${{ inputs.name }}

      - name: Create single manifest.json
        run: |
          jq -s '{"name": "${{ inputs.name }}", "version": "${{ needs.build.outputs.esphome-version }}", "home_assistant_domain": "esphome", "new_install_skip_erase": false, "builds":.}' output/*/manifest.json > output/${{ inputs.manifest_filename }}
      - run: |
          mkdir output-test
          cp -r output/* output-test/

      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.6.1
        with:
          branch: gh-pages-test
          folder: output/${{ steps.esphome-build.outputs.name }}  # Use the firmware file name
          clean: true

  # release:
  #   needs: build
  #   name: Release firmware
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4.1.7
  #     - uses: actions/download-artifact@v4.1.7
  #       with:
  #         path: output
  #         name: firmware

  #     - run: |
  #         mkdir output-release
  #         cp -r output/* output-release/

  #     - uses: JamesIves/github-pages-deploy-action@v4.6.1
  #       with:
  #         branch: gh-pages-release
  #         folder: output-release
  #         clean: true

  #     - name: Create GitHub Release
  #       uses: shogo82148/actions-create-release@v1
  #       # env:
  #       #   github_token: ${{ secrets.MY_TOKEN }}
  #       with:
  #         tag_name: ${{ github.sha }}
  #         release_name: Firmware Release ${{ github.sha }}
  #         body: |
  #           New firmware release!
